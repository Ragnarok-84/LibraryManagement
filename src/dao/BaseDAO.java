package dao;

import util.DBConnection;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.Optional;

public abstract class BaseDAO<T> implements DAO<T> {

    // ===== ‚ö° Cung c·∫•p k·∫øt n·ªëi DB d√πng chung =====
    protected Connection getConnection() throws SQLException {
        return DBConnection.getConnection();
    }

    // ===== üß≠ C√°c ph∆∞∆°ng th·ª©c abstract ƒë·ªÉ l·ªõp con override =====
    protected abstract T mapRowToEntity(ResultSet rs) throws SQLException;

    protected abstract String getTableName();
    protected abstract String getIdColumnName();

    // ===== ‚úÖ X√≥a b·∫£n ghi theo ID =====
    @Override
    public void delete(int id) {
        String sql = "DELETE FROM " + getTableName() + " WHERE " + getIdColumnName() + " = ?";
        try (Connection conn = getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id);
            stmt.executeUpdate();
        } catch (SQLException e) {
            System.err.println("‚ùå L·ªói SQL khi x√≥a " + getTableName() + ": " + e.getMessage());
        }
    }

    // ===== ‚ö° findAll() s·∫Ω ƒë∆∞·ª£c override t√πy t·ª´ng b·∫£ng, nh∆∞ng c√≥ th·ªÉ implement m·∫∑c ƒë·ªãnh =====
    @Override
    public List<T> findAll() {
        throw new UnsupportedOperationException("L·ªõp con ph·∫£i override findAll()!");
    }

    // ===== ‚ö° findById() m·∫∑c ƒë·ªãnh (n·∫øu c·∫ßn) =====
    @Override
    public Optional<T> findByID(int id) {
        throw new UnsupportedOperationException("L·ªõp con ph·∫£i override findById()!");
    }
}
