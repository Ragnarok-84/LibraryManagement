package ui;

import dao.BookDAO;
import model.Book;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.List;

import static ui.UiStyles.*;
import static ui.LibraryFrame.simpleChange; // Th√™m import cho simpleChange

public class BookUI extends JPanel { // Thay ƒë·ªïi t·ª´ JFrame sang JPanel
    private final BookDAO bookDAO = new BookDAO();
    private final LibraryFrame parentFrame; // Th√™m tham chi·∫øu ƒë·∫øn LibraryFrame

    public BookUI(LibraryFrame parentFrame) { // Nh·∫≠n LibraryFrame qua constructor
        this.parentFrame = parentFrame;
        setLayout(new BorderLayout(0, 12));
        setOpaque(false);
        setBorder(new EmptyBorder(0, 0, 0, 0)); // B·ªè border ·ªü ƒë√¢y v√¨ LibraryFrame ƒë√£ c√≥

        // G·ªçi ph∆∞∆°ng th·ª©c x√¢y d·ª±ng giao di·ªán t·ª´ LibraryFrame c≈©
        // Chuy·ªÉn logic t·ª´ buildBooks() c·ªßa LibraryFrame c≈© v√†o ƒë√¢y
        buildBookPanel();
    }

    private void buildBookPanel() {
        // ======= THANH T√åM KI·∫æM + N√öT TH√äM =======
        JTextField search = new JTextField();
        search.putClientProperty("JTextField.placeholderText", "T√¨m ki·∫øm theo t√™n s√°ch, t√°c gi·∫£ ho·∫∑c ISBN...");

        JButton add = new JButton("+ Th√™m s√°ch m·ªõi");
        add.setBackground(PRIMARY);
        add.setForeground(Color.WHITE);

        JButton edit = new JButton("‚úèÔ∏è C·∫≠p nh·∫≠t s√°ch");
        edit.setBackground(new Color(255, 180, 0));
        edit.setForeground(Color.WHITE);

        JButton delete = new JButton("üóë X√≥a s√°ch");
        delete.setBackground(Color.RED);
        delete.setForeground(Color.WHITE);

        JPanel btnPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 8, 0));
        btnPanel.add(add);
        btnPanel.add(delete);
        btnPanel.add(edit);

        JPanel top = new JPanel(new BorderLayout(8, 0));
        top.add(search, BorderLayout.CENTER);
        top.add(btnPanel, BorderLayout.EAST);
        add(top, BorderLayout.NORTH);

        // ======= C·∫§U H√åNH B·∫¢NG HI·ªÇN TH·ªä S√ÅCH =======
        String[] cols = {
                "M√£ s√°ch", "T√™n s√°ch", "T√°c gi·∫£", "ISBN",
                "NXB", "S·ªë trang", "Ng√†y XB", "T·ªïng", "Kh·∫£ d·ª•ng"
        };

        JTable table = new JTable(new javax.swing.table.DefaultTableModel(cols, 0));
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        // ======= ƒêI·ªÄU CH·ªàNH CHI·ªÄU R·ªòNG C·ªòT =======
        table.getColumnModel().getColumn(0).setPreferredWidth(70);   // M√£ s√°ch
        table.getColumnModel().getColumn(1).setPreferredWidth(280);  // T√™n s√°ch
        table.getColumnModel().getColumn(2).setPreferredWidth(180);  // T√°c gi·∫£
        table.getColumnModel().getColumn(3).setPreferredWidth(120);  // ISBN
        table.getColumnModel().getColumn(4).setPreferredWidth(160);  // Nh√† xu·∫•t b·∫£n
        table.getColumnModel().getColumn(5).setPreferredWidth(90);   // S·ªë trang
        table.getColumnModel().getColumn(6).setPreferredWidth(110);  // Ng√†y xu·∫•t b·∫£n
        table.getColumnModel().getColumn(7).setPreferredWidth(70);   // T·ªïng
        table.getColumnModel().getColumn(8).setPreferredWidth(80);   // Kh·∫£ d·ª•ng

        table.setRowHeight(26);
        table.setFillsViewportHeight(true);
        add(new JScrollPane(table), BorderLayout.CENTER);

        // ======= N·∫†P D·ªÆ LI·ªÜU T·ª™ DATABASE =======
        Runnable reload = () -> {
            javax.swing.table.DefaultTableModel model =
                    (javax.swing.table.DefaultTableModel) table.getModel();
            model.setRowCount(0);

            List<Book> books = search.getText().isEmpty()
                    ? bookDAO.getAllBooks()
                    : bookDAO.searchBooks(search.getText());

            for (Book b : books) {
                model.addRow(new Object[]{
                        b.getBookID(),
                        b.getTitle(),
                        b.getAuthor(),
                        b.getIsbn(),
                        b.getPublisher(),
                        b.getNumPages(),
                        b.getPublicationDate(),
                        b.getTotal(),
                        b.getAvailable()
                });
            }
        };
        search.getDocument().addDocumentListener(simpleChange(reload));

        // ======= N√öT TH√äM S√ÅCH (Gi·ªØ nguy√™n logic) =======
        add.addActionListener(e -> {
            // --- Giao di·ªán dialog (gi·ªØ nguy√™n) ---
            JTextField titleField = new JTextField();
            JTextField authorField = new JTextField();
            JTextField isbnField = new JTextField(String.valueOf(System.currentTimeMillis()).substring(0, 10));
            JTextField publisherField = new JTextField();
            JTextField pagesField = new JTextField();
            JTextField dateField = new JTextField("2025-01-01");
            JTextField totalField = new JTextField("1");

            JPanel panel = new JPanel(new GridLayout(0, 2, 6, 6));
            panel.add(new JLabel("T√™n s√°ch:"));
            panel.add(titleField);
            panel.add(new JLabel("T√°c gi·∫£:"));
            panel.add(authorField);
            panel.add(new JLabel("ISBN:"));
            panel.add(isbnField);
            panel.add(new JLabel("Nh√† xu·∫•t b·∫£n:"));
            panel.add(publisherField);
            panel.add(new JLabel("S·ªë trang:"));
            panel.add(pagesField);
            panel.add(new JLabel("Ng√†y xu·∫•t b·∫£n (yyyy-MM-dd):"));
            panel.add(dateField);
            panel.add(new JLabel("T·ªïng s·ªë l∆∞·ª£ng:"));
            panel.add(totalField);

            int result = JOptionPane.showConfirmDialog(
                    null,
                    panel,
                    "Th√™m s√°ch m·ªõi",
                    JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.PLAIN_MESSAGE
            );

            // --- B·∫Øt ƒë·∫ßu x·ª≠ l√Ω logic SAU KHI nh·∫•n OK ---
            if (result == JOptionPane.OK_OPTION) {
                try {
                    // --- 1. VALIDATION (X√°c th·ª±c d·ªØ li·ªáu) ---
                    String title = titleField.getText();
                    String author = authorField.getText();
                    String pagesStr = pagesField.getText();
                    String totalStr = totalField.getText();
                    String dateStr = dateField.getText();

                    if (title.isBlank() || author.isBlank() || pagesStr.isBlank() || totalStr.isBlank() || dateStr.isBlank()) {
                        JOptionPane.showMessageDialog(null, "‚ùå Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ c√°c tr∆∞·ªùng.", "L·ªói", JOptionPane.ERROR_MESSAGE);
                        return; // D·ª´ng l·∫°i
                    }

                    int numPages;
                    try {
                        numPages = Integer.parseInt(pagesStr);
                    } catch (NumberFormatException nfe) {
                        JOptionPane.showMessageDialog(null, "‚ùå 'S·ªë trang' ph·∫£i l√† m·ªôt con s·ªë.", "L·ªói", JOptionPane.ERROR_MESSAGE);
                        return; // D·ª´ng l·∫°i
                    }

                    int total;
                    try {
                        total = Integer.parseInt(totalStr);
                    } catch (NumberFormatException nfe) {
                        JOptionPane.showMessageDialog(null, "‚ùå 'T·ªïng s·ªë l∆∞·ª£ng' ph·∫£i l√† m·ªôt con s·ªë.", "L·ªói", JOptionPane.ERROR_MESSAGE);
                        return; // D·ª´ng l·∫°i
                    }

                    LocalDate pubDate;
                    try {
                        pubDate = LocalDate.parse(dateStr);
                    } catch (java.time.format.DateTimeParseException dte) {
                        JOptionPane.showMessageDialog(null, "‚ùå 'Ng√†y xu·∫•t b·∫£n' ph·∫£i ƒë√∫ng ƒë·ªãnh d·∫°ng yyyy-MM-dd.", "L·ªói", JOptionPane.ERROR_MESSAGE);
                        return; // D·ª´ng l·∫°i
                    }

                    // --- 2. T·∫†O OBJECT (N·∫øu validation th√†nh c√¥ng) ---
                    Book b = new Book();
                    b.setTitle(title);
                    b.setAuthor(author);
                    b.setIsbn(isbnField.getText());
                    b.setPublisher(publisherField.getText());
                    b.setNumPages(numPages);
                    b.setPublicationDate(pubDate);
                    b.setTotal(total);
                    b.setAvailable(total); // M·∫∑c ƒë·ªãnh s√°ch m·ªõi th√¨ s·ªë l∆∞·ª£ng c√≤n = t·ªïng

                    // --- 3. G·ªåI DAO (ƒë√£ s·ª≠a ƒë·ªÉ n√©m SQLException) ---
                    bookDAO.addBook(b);

                    // --- 4. TH√ÄNH C√îNG ---
                    reload.run();
                    parentFrame.refreshAll();
                    JOptionPane.showMessageDialog(null, "‚úÖ Th√™m s√°ch th√†nh c√¥ng!");

                } catch (SQLException sqlEx) {
                    // L·ªói t·ª´ Database (v√≠ d·ª•: Tr√πng ISBN)
                    JOptionPane.showMessageDialog(null, "‚ùå L·ªói CSDL khi th√™m s√°ch: " + sqlEx.getMessage(), "L·ªói SQL", JOptionPane.ERROR_MESSAGE);
                } catch (Exception ex) {
                    // L·ªói chung kh√°c (bao g·ªìm l·ªói validation ·ªü tr√™n n·∫øu b·∫°n kh√¥ng 'return')
                    JOptionPane.showMessageDialog(null, "‚ùå ƒê√£ x·∫£y ra l·ªói: " + ex.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        // ======= N√öT X√ìA S√ÅCH (Gi·ªØ nguy√™n logic) =======
        delete.addActionListener(e -> {
            int selectedRow = table.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn s√°ch c·∫ßn x√≥a!");
                return;
            }

            int bookId = Integer.parseInt(table.getValueAt(selectedRow, 0).toString());

            int confirm = JOptionPane.showConfirmDialog(
                    this,
                    "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s√°ch n√†y (bao g·ªìm c·∫£ l·ªãch s·ª≠ m∆∞·ª£n)?",
                    "X√°c nh·∫≠n x√≥a",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE // Th√™m icon c·∫£nh b√°o
            );

            if (confirm == JOptionPane.YES_OPTION) {
                // B·∫ÆT BU·ªòC ph·∫£i c√≥ try-catch ·ªü ƒë√¢y
                try {
                    // G·ªçi h√†m deleteBook ƒë√£ s·ª≠a (c√≥ transaction)
                    bookDAO.deleteBook(bookId);

                    // Ch·ªâ ch·∫°y nh·ªØng d√≤ng n√†y N·∫æU try th√†nh c√¥ng
                    reload.run();
                    parentFrame.refreshAll();
                    JOptionPane.showMessageDialog(this, "ƒê√£ x√≥a s√°ch th√†nh c√¥ng!");

                } catch (Exception ex) {
                    // N·∫øu 'deleteBook' n√©m l·ªói (v√≠ d·ª•: transaction th·∫•t b·∫°i)
                    // L·ªói s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng
                    JOptionPane.showMessageDialog(this, "‚ùå L·ªói khi x√≥a s√°ch: " + ex.getMessage(), "L·ªói SQL", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }
            }
        });

        // C·∫¨P NH·∫¨T S√ÅCH (Gi·ªØ nguy√™n logic)
        edit.addActionListener(e -> {
            int selectedRow = table.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn s√°ch ƒë·ªÉ c·∫≠p nh·∫≠t!");
                return;
            }

            // L·∫•y d·ªØ li·ªáu hi·ªán t·∫°i t·ª´ JTable (theo ƒë√∫ng th·ª© t·ª± c·ªôt)
            int id = Integer.parseInt(table.getValueAt(selectedRow, 0).toString());
            String title = table.getValueAt(selectedRow, 1).toString();
            String author = table.getValueAt(selectedRow, 2).toString();
            String isbn = table.getValueAt(selectedRow, 3).toString();
            String publisher = table.getValueAt(selectedRow, 4).toString();
            int numPages = Integer.parseInt(table.getValueAt(selectedRow, 5).toString());
            String pubDate = table.getValueAt(selectedRow, 6).toString();
            int total = Integer.parseInt(table.getValueAt(selectedRow, 7).toString());
            int available = Integer.parseInt(table.getValueAt(selectedRow, 8).toString());


            // Hi·ªÉn th·ªã h·ªôp tho·∫°i cho ng∆∞·ªùi d√πng ch·ªânh s·ª≠a
            String newTitle = JOptionPane.showInputDialog(this, "T√™n s√°ch:", title);
            if (newTitle == null) return;

            String newAuthor = JOptionPane.showInputDialog(this, "T√°c gi·∫£:", author);
            if (newAuthor == null) return;

            String newIsbn = JOptionPane.showInputDialog(this, "ISBN:", isbn);
            if (newIsbn == null) return;

            String newPublisher = JOptionPane.showInputDialog(this, "Nh√† xu·∫•t b·∫£n:", publisher);
            if (newPublisher == null) return;

            String newPubDate = JOptionPane.showInputDialog(this, "Ng√†y xu·∫•t b·∫£n (yyyy-mm-dd):", pubDate);
            if (newPubDate == null) return;

            int newPages;
            try {
                newPages = Integer.parseInt(JOptionPane.showInputDialog(this, "S·ªë trang:", numPages));
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "S·ªë trang kh√¥ng h·ª£p l·ªá!");
                return;
            }

            int newTotal;
            try {
                newTotal = Integer.parseInt(JOptionPane.showInputDialog(this, "T·ªïng s·ªë l∆∞·ª£ng:", total));
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá!");
                return;
            }

            int newAvailable;
            try {
                newAvailable = Integer.parseInt(JOptionPane.showInputDialog(this, "S√°ch c√≤n l·∫°i:", available));
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "S·ªë l∆∞·ª£ng s√°ch c√≤n kh√¥ng h·ª£p l·ªá!");
                return;
            }

            // T·∫°o ƒë·ªëi t∆∞·ª£ng Book m·ªõi
            Book b = new Book();
            b.setBookID(id);
            b.setTitle(newTitle);
            b.setAuthor(newAuthor);
            b.setIsbn(newIsbn);
            b.setPublisher(newPublisher);
            b.setPublicationDate(LocalDate.parse(newPubDate));
            b.setNumPages(newPages);
            b.setTotal(newTotal);
            b.setAvailable(newAvailable);

            // G·ªçi DAO ƒë·ªÉ c·∫≠p nh·∫≠t
            bookDAO.updateBook(b);

            reload.run();
            parentFrame.refreshAll(); // G·ªçi refreshAll()

            JOptionPane.showMessageDialog(this, "‚úÖ C·∫≠p nh·∫≠t s√°ch th√†nh c√¥ng!");
        });


        reload.run(); // N·∫°p d·ªØ li·ªáu l·∫ßn ƒë·∫ßu
    }
}